// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudioMetrics.Data;

namespace StudioMetrics.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181213164632_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StudioMetrics.Models.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("ArtistId");

                    b.HasIndex("UserId");

                    b.ToTable("Artist");

                    b.HasData(
                        new { ArtistId = 1, Name = "Smashing Pumpkins", UserId = "6f6975c7-6999-42bc-90c1-9cb207231270" },
                        new { ArtistId = 2, Name = "Lake Street Dive", UserId = "6f6975c7-6999-42bc-90c1-9cb207231270" },
                        new { ArtistId = 3, Name = "Barns Courtney", UserId = "6f6975c7-6999-42bc-90c1-9cb207231270" },
                        new { ArtistId = 4, Name = "The Pink Spiders", UserId = "6f6975c7-6999-42bc-90c1-9cb207231270" }
                    );
                });

            modelBuilder.Entity("StudioMetrics.Models.ArtistProject", b =>
                {
                    b.Property<int>("ArtistProjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtistId");

                    b.Property<int>("ProjectId");

                    b.HasKey("ArtistProjectId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ArtistProject");

                    b.HasData(
                        new { ArtistProjectId = 1, ArtistId = 1, ProjectId = 1 },
                        new { ArtistProjectId = 2, ArtistId = 2, ProjectId = 2 }
                    );
                });

            modelBuilder.Entity("StudioMetrics.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Client");

                    b.HasData(
                        new { ClientId = 1, Email = "mhaleindustries@mhale.com", Name = "Mark Hale", Phone = "615-111-1111", UserId = "6f6975c7-6999-42bc-90c1-9cb207231270" },
                        new { ClientId = 2, Email = "dcunningham@dcunningham.com", Name = "David Cunningham", Phone = "615-222-2222", UserId = "6f6975c7-6999-42bc-90c1-9cb207231270" },
                        new { ClientId = 3, Email = "mansound@sound.com", Name = "Michelle An", Phone = "615-333-3333", UserId = "6f6975c7-6999-42bc-90c1-9cb207231270" }
                    );
                });

            modelBuilder.Entity("StudioMetrics.Models.ClientArtist", b =>
                {
                    b.Property<int>("ClientArtistId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtistId");

                    b.Property<int>("ClientId");

                    b.HasKey("ClientArtistId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientArtist");

                    b.HasData(
                        new { ClientArtistId = 1, ArtistId = 1, ClientId = 1 },
                        new { ClientArtistId = 2, ArtistId = 2, ClientId = 3 }
                    );
                });

            modelBuilder.Entity("StudioMetrics.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Instrument")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("PlayerId");

                    b.HasIndex("UserId");

                    b.ToTable("Player");

                    b.HasData(
                        new { PlayerId = 1, Email = "abelaboriel@paulmcaartney.com", FirstName = "Abe", Instrument = "Drums", LastName = "Laboriel Jr.", Phone = "999-999-9999", UserId = "6f6975c7-6999-42bc-90c1-9cb207231270" },
                        new { PlayerId = 2, Email = "paul@paulmccartney.com", FirstName = "Paul", Instrument = "Vocals", LastName = "McCartney", Phone = "999-999-9999", UserId = "6f6975c7-6999-42bc-90c1-9cb207231270" },
                        new { PlayerId = 3, Email = "jhendrix@jhendrix.com", FirstName = "Jimmy", Instrument = "Guitar", LastName = "Hendrix", Phone = "999-999-9999", UserId = "6f6975c7-6999-42bc-90c1-9cb207231270" },
                        new { PlayerId = 4, Email = "swonder@swonder.com", FirstName = "Stevie", Instrument = "Keyboards", LastName = "Wonder", Phone = "999-999-9999", UserId = "6f6975c7-6999-42bc-90c1-9cb207231270" }
                    );
                });

            modelBuilder.Entity("StudioMetrics.Models.PlayerProject", b =>
                {
                    b.Property<int>("PlayerProjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlayerId");

                    b.Property<int>("ProjectId");

                    b.HasKey("PlayerProjectId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("PlayerProject");

                    b.HasData(
                        new { PlayerProjectId = 1, PlayerId = 2, ProjectId = 1 },
                        new { PlayerProjectId = 2, PlayerId = 1, ProjectId = 1 },
                        new { PlayerProjectId = 3, PlayerId = 4, ProjectId = 2 }
                    );
                });

            modelBuilder.Entity("StudioMetrics.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<double>("Payrate");

                    b.Property<int>("ProjectTypeId");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("StatusTypeId");

                    b.Property<int>("TimeTable");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(55);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("ProjectId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("StatusTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Project");

                    b.HasData(
                        new { ProjectId = 1, ClientId = 1, Description = "An hit in the making", Payrate = 2500.0, ProjectTypeId = 1, StartDate = new DateTime(2018, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), StatusTypeId = 1, TimeTable = 5, Title = "Hey Jude", UserId = "6f6975c7-6999-42bc-90c1-9cb207231270" },
                        new { ProjectId = 2, ClientId = 3, Description = "A great album", Payrate = 1500.0, ProjectTypeId = 3, StartDate = new DateTime(2018, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), StatusTypeId = 2, TimeTable = 25, Title = "Free Yourself Up", UserId = "6f6975c7-6999-42bc-90c1-9cb207231270" }
                    );
                });

            modelBuilder.Entity("StudioMetrics.Models.ProjectType", b =>
                {
                    b.Property<int>("ProjectTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("ProjectTypeId");

                    b.ToTable("ProjectType");

                    b.HasData(
                        new { ProjectTypeId = 1, Type = "Single Song Release" },
                        new { ProjectTypeId = 2, Type = "Extended Play CD" },
                        new { ProjectTypeId = 3, Type = "Full Length CD" },
                        new { ProjectTypeId = 4, Type = "Single Song Demo" },
                        new { ProjectTypeId = 5, Type = "30 Second Audio Commercial" },
                        new { ProjectTypeId = 6, Type = "60 Second Audio Commercial" },
                        new { ProjectTypeId = 7, Type = "Audio Industrial" },
                        new { ProjectTypeId = 8, Type = "Live Concert Recording" }
                    );
                });

            modelBuilder.Entity("StudioMetrics.Models.StatusType", b =>
                {
                    b.Property<int>("StatusTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("StatusTypeId");

                    b.ToTable("StatusType");

                    b.HasData(
                        new { StatusTypeId = 1, Type = "Upcoming" },
                        new { StatusTypeId = 2, Type = "Completed" },
                        new { StatusTypeId = 3, Type = "Current" },
                        new { StatusTypeId = 4, Type = "Tentative" }
                    );
                });

            modelBuilder.Entity("StudioMetrics.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("CompanyName")
                        .IsRequired();

                    b.ToTable("ApplicationUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new { Id = "6f6975c7-6999-42bc-90c1-9cb207231270", AccessFailedCount = 0, ConcurrencyStamp = "96c746a0-1b55-444b-84ae-3c43b6d4855b", Email = "admin@admin.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "ADMIN@ADMIN.COM", NormalizedUserName = "ADMIN@ADMIN.COM", PasswordHash = "AQAAAAEAACcQAAAAEIo7TvX+oNRATXWXGqfLIfmVIAzvCleO2pIa6RbYdi9fRLtkOnK47eCSTHVXYZHIIQ==", PhoneNumberConfirmed = false, SecurityStamp = "4229f397-1454-4b61-9e08-128384e7d664", TwoFactorEnabled = false, UserName = "admin@admin.com", CompanyName = "admin" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudioMetrics.Models.Artist", b =>
                {
                    b.HasOne("StudioMetrics.Models.ApplicationUser", "User")
                        .WithMany("Artists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudioMetrics.Models.ArtistProject", b =>
                {
                    b.HasOne("StudioMetrics.Models.Artist", "Artist")
                        .WithMany("ArtistProjects")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StudioMetrics.Models.Project", "Project")
                        .WithMany("ArtistProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StudioMetrics.Models.Client", b =>
                {
                    b.HasOne("StudioMetrics.Models.ApplicationUser", "User")
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudioMetrics.Models.ClientArtist", b =>
                {
                    b.HasOne("StudioMetrics.Models.Artist", "Artist")
                        .WithMany("ClientArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StudioMetrics.Models.Client", "Client")
                        .WithMany("ClientArtists")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StudioMetrics.Models.Player", b =>
                {
                    b.HasOne("StudioMetrics.Models.ApplicationUser", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudioMetrics.Models.PlayerProject", b =>
                {
                    b.HasOne("StudioMetrics.Models.Player", "Player")
                        .WithMany("PlayerProjects")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StudioMetrics.Models.Project", "Project")
                        .WithMany("PlayerProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StudioMetrics.Models.Project", b =>
                {
                    b.HasOne("StudioMetrics.Models.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudioMetrics.Models.ProjectType", "ProjectType")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudioMetrics.Models.StatusType", "StatusType")
                        .WithMany("Projects")
                        .HasForeignKey("StatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudioMetrics.Models.ApplicationUser", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
